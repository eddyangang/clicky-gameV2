{"version":3,"sources":["components/Tile/index.js","components/Wrapper/index.js","components/Nav/index.js","App.js","serviceWorker.js","index.js"],"names":["Tile","props","className","id","onClick","check","alt","name","src","image","Wrapper","children","Nav","score","App","state","friends","clicked","suffleFriends","sort","Math","random","setState","alert","reset","includes","push","this","map","friend","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"ytFAaeA,MAVf,SAAcC,GACZ,OACE,yBAAKC,UAAU,OAAOC,GAAMF,EAAME,GAAIC,QAAS,kBAAMH,EAAMI,MAAMJ,EAAME,MACrE,yBAAKD,UAAU,iBACb,yBAAKI,IAAKL,EAAMM,KAAMC,IAAKP,EAAMQ,W,MCA1BC,MAJf,SAAiBT,GACf,OAAO,yBAAKC,UAAU,WAAWD,EAAMU,W,MCO1BC,MARf,SAAcX,GACV,OACI,iCACI,sCAAYA,EAAMY,MAAlB,WC6DGC,E,4MA3DbC,MAAQ,CACNC,UACAH,MAAO,EACPI,QAAS,I,EAGXC,cAAgB,WACdF,EAAQG,MAAK,kBAAMC,KAAKC,SAAW,MACnC,EAAKC,SAAS,CAACN,QAAUA,K,EAI3BX,MAAQ,SAACF,GAEkB,KAArB,EAAKY,MAAMF,QACbU,MAAM,+BACN,EAAKC,SAGF,EAAKT,MAAME,QAAQQ,SAAStB,IAK/B,EAAKqB,QACLD,MAAM,yBALN,EAAKR,MAAME,QAAQS,KAAKvB,GACxB,EAAKmB,SAAS,CAACT,MAAO,EAAKE,MAAMF,MAAQ,IACzC,EAAKK,kB,EAOTM,MAAQ,WACN,EAAKN,gBACL,EAAKI,SAAS,CAACT,MAAO,IACtB,EAAKS,SAAS,CAACL,QAAS,M,uDAGhB,IAAD,OAEP,OAEA,6BACI,kBAAC,EAAD,CAAKJ,MAASc,KAAKZ,MAAMF,QACzB,kBAAC,EAAD,KAEIc,KAAKZ,MAAMC,QAAQY,KAAI,SAAAC,GACrB,OACE,kBAAC,EAAD,CACA1B,GAAM0B,EAAO1B,GACbI,KAAMsB,EAAOtB,KACbE,MAAOoB,EAAOpB,MACdJ,MAAO,EAAKA,iB,GAnDVyB,aCMEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCbNC,IAASC,OACP,kBAAC,EAAD,MACAC,SAASC,eAAe,SD4HpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.eec36f90.chunk.js","sourcesContent":["import React from \"react\";\r\nimport \"./style.css\";\r\n\r\nfunction Tile(props) {\r\n  return (\r\n    <div className=\"card\" id = {props.id} onClick={() => props.check(props.id)}>\r\n      <div className=\"img-container\">\r\n        <img alt={props.name} src={props.image} />\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Tile;\r\n","import React from \"react\";\r\nimport \"./style.css\";\r\n\r\nfunction Wrapper(props) {\r\n  return <div className=\"wrapper\">{props.children}</div>;\r\n}\r\n\r\nexport default Wrapper;\r\n","import React from \"react\";\r\nimport \"./style.css\";\r\n\r\nfunction Nav (props) {\r\n    return (\r\n        <section>\r\n            <h1>Score: {props.score} / 12</h1>\r\n        </section>\r\n    );\r\n}\r\n\r\nexport default Nav;","import React, { Component } from \"react\";\nimport friends from \"./friends.json\";\nimport Tile from \"./components/Tile\";\nimport Wrapper from \"./components/Wrapper\";\nimport Nav from \"./components/Nav\"\n\nclass App extends Component {\n\n  state = {\n    friends,\n    score: 0,\n    clicked: []\n  }\n\n  suffleFriends = () => {\n    friends.sort(() => Math.random() - 0.5);\n    this.setState({friends : friends})\n  }\n\n\n  check = (id) => {\n\n    if (this.state.score === 12) {\n      alert(\"Congratulations! You Won!!!\")\n      this.reset()\n    }\n    \n    if (!this.state.clicked.includes(id)) {\n      this.state.clicked.push(id)\n      this.setState({score: this.state.score + 1})\n      this.suffleFriends()\n    } else {\n      this.reset();\n      alert(\"You lose. Try Again\")\n    }\n  }\n\n  reset = () => {\n    this.suffleFriends()\n    this.setState({score: 0});\n    this.setState({clicked: []});\n  }\n\n  render() {\n\n    return (\n\n    <div>\n        <Nav score = {this.state.score}/>\n        <Wrapper> \n          {\n            this.state.friends.map(friend => {\n              return (\n                <Tile\n                id = {friend.id}\n                name={friend.name}\n                image={friend.image}\n                check={this.check}\n              />\n              );\n        })}\n        </Wrapper>\n    </div>\n    );\n  }\n\n}\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}